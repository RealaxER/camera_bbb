// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: typedef.proto

#ifndef PROTOBUF_INCLUDED_typedef_2eproto
#define PROTOBUF_INCLUDED_typedef_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_typedef_2eproto 

namespace protobuf_typedef_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_typedef_2eproto
class ProtoP2p_t;
class ProtoP2p_tDefaultTypeInternal;
extern ProtoP2p_tDefaultTypeInternal _ProtoP2p_t_default_instance_;
class Transport_t;
class Transport_tDefaultTypeInternal;
extern Transport_tDefaultTypeInternal _Transport_t_default_instance_;
namespace google {
namespace protobuf {
template<> ::ProtoP2p_t* Arena::CreateMaybeMessage<::ProtoP2p_t>(Arena*);
template<> ::Transport_t* Arena::CreateMaybeMessage<::Transport_t>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ProtoP2p_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ProtoP2p_t) */ {
 public:
  ProtoP2p_t();
  virtual ~ProtoP2p_t();

  ProtoP2p_t(const ProtoP2p_t& from);

  inline ProtoP2p_t& operator=(const ProtoP2p_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProtoP2p_t(ProtoP2p_t&& from) noexcept
    : ProtoP2p_t() {
    *this = ::std::move(from);
  }

  inline ProtoP2p_t& operator=(ProtoP2p_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtoP2p_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoP2p_t* internal_default_instance() {
    return reinterpret_cast<const ProtoP2p_t*>(
               &_ProtoP2p_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProtoP2p_t* other);
  friend void swap(ProtoP2p_t& a, ProtoP2p_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProtoP2p_t* New() const final {
    return CreateMaybeMessage<ProtoP2p_t>(NULL);
  }

  ProtoP2p_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProtoP2p_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProtoP2p_t& from);
  void MergeFrom(const ProtoP2p_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoP2p_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 17;
  void clear_description();
  static const int kDescriptionFieldNumber = 17;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string candidate = 18;
  void clear_candidate();
  static const int kCandidateFieldNumber = 18;
  const ::std::string& candidate() const;
  void set_candidate(const ::std::string& value);
  #if LANG_CXX11
  void set_candidate(::std::string&& value);
  #endif
  void set_candidate(const char* value);
  void set_candidate(const char* value, size_t size);
  ::std::string* mutable_candidate();
  ::std::string* release_candidate();
  void set_allocated_candidate(::std::string* candidate);

  // @@protoc_insertion_point(class_scope:ProtoP2p_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr candidate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_typedef_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_t : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Transport_t) */ {
 public:
  Transport_t();
  virtual ~Transport_t();

  Transport_t(const Transport_t& from);

  inline Transport_t& operator=(const Transport_t& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_t(Transport_t&& from) noexcept
    : Transport_t() {
    *this = ::std::move(from);
  }

  inline Transport_t& operator=(Transport_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transport_t* internal_default_instance() {
    return reinterpret_cast<const Transport_t*>(
               &_Transport_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Transport_t* other);
  friend void swap(Transport_t& a, Transport_t& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_t* New() const final {
    return CreateMaybeMessage<Transport_t>(NULL);
  }

  Transport_t* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Transport_t>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Transport_t& from);
  void MergeFrom(const Transport_t& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transport_t* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ProtoP2p_t p2p = 2;
  int p2p_size() const;
  void clear_p2p();
  static const int kP2PFieldNumber = 2;
  ::ProtoP2p_t* mutable_p2p(int index);
  ::google::protobuf::RepeatedPtrField< ::ProtoP2p_t >*
      mutable_p2p();
  const ::ProtoP2p_t& p2p(int index) const;
  ::ProtoP2p_t* add_p2p();
  const ::google::protobuf::RepeatedPtrField< ::ProtoP2p_t >&
      p2p() const;

  // string mac = 1;
  void clear_mac();
  static const int kMacFieldNumber = 1;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // @@protoc_insertion_point(class_scope:Transport_t)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ProtoP2p_t > p2p_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_typedef_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoP2p_t

// string description = 17;
inline void ProtoP2p_t::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoP2p_t::description() const {
  // @@protoc_insertion_point(field_get:ProtoP2p_t.description)
  return description_.GetNoArena();
}
inline void ProtoP2p_t::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtoP2p_t.description)
}
#if LANG_CXX11
inline void ProtoP2p_t::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtoP2p_t.description)
}
#endif
inline void ProtoP2p_t::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtoP2p_t.description)
}
inline void ProtoP2p_t::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtoP2p_t.description)
}
inline ::std::string* ProtoP2p_t::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ProtoP2p_t.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoP2p_t::release_description() {
  // @@protoc_insertion_point(field_release:ProtoP2p_t.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoP2p_t::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ProtoP2p_t.description)
}

// string candidate = 18;
inline void ProtoP2p_t::clear_candidate() {
  candidate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ProtoP2p_t::candidate() const {
  // @@protoc_insertion_point(field_get:ProtoP2p_t.candidate)
  return candidate_.GetNoArena();
}
inline void ProtoP2p_t::set_candidate(const ::std::string& value) {
  
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ProtoP2p_t.candidate)
}
#if LANG_CXX11
inline void ProtoP2p_t::set_candidate(::std::string&& value) {
  
  candidate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ProtoP2p_t.candidate)
}
#endif
inline void ProtoP2p_t::set_candidate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ProtoP2p_t.candidate)
}
inline void ProtoP2p_t::set_candidate(const char* value, size_t size) {
  
  candidate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ProtoP2p_t.candidate)
}
inline ::std::string* ProtoP2p_t::mutable_candidate() {
  
  // @@protoc_insertion_point(field_mutable:ProtoP2p_t.candidate)
  return candidate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProtoP2p_t::release_candidate() {
  // @@protoc_insertion_point(field_release:ProtoP2p_t.candidate)
  
  return candidate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProtoP2p_t::set_allocated_candidate(::std::string* candidate) {
  if (candidate != NULL) {
    
  } else {
    
  }
  candidate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate);
  // @@protoc_insertion_point(field_set_allocated:ProtoP2p_t.candidate)
}

// -------------------------------------------------------------------

// Transport_t

// string mac = 1;
inline void Transport_t::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transport_t::mac() const {
  // @@protoc_insertion_point(field_get:Transport_t.mac)
  return mac_.GetNoArena();
}
inline void Transport_t::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transport_t.mac)
}
#if LANG_CXX11
inline void Transport_t::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transport_t.mac)
}
#endif
inline void Transport_t::set_mac(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transport_t.mac)
}
inline void Transport_t::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transport_t.mac)
}
inline ::std::string* Transport_t::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:Transport_t.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_t::release_mac() {
  // @@protoc_insertion_point(field_release:Transport_t.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_t::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:Transport_t.mac)
}

// repeated .ProtoP2p_t p2p = 2;
inline int Transport_t::p2p_size() const {
  return p2p_.size();
}
inline void Transport_t::clear_p2p() {
  p2p_.Clear();
}
inline ::ProtoP2p_t* Transport_t::mutable_p2p(int index) {
  // @@protoc_insertion_point(field_mutable:Transport_t.p2p)
  return p2p_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoP2p_t >*
Transport_t::mutable_p2p() {
  // @@protoc_insertion_point(field_mutable_list:Transport_t.p2p)
  return &p2p_;
}
inline const ::ProtoP2p_t& Transport_t::p2p(int index) const {
  // @@protoc_insertion_point(field_get:Transport_t.p2p)
  return p2p_.Get(index);
}
inline ::ProtoP2p_t* Transport_t::add_p2p() {
  // @@protoc_insertion_point(field_add:Transport_t.p2p)
  return p2p_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoP2p_t >&
Transport_t::p2p() const {
  // @@protoc_insertion_point(field_list:Transport_t.p2p)
  return p2p_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_typedef_2eproto
